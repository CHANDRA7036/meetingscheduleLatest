/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ConfigurableFocusTrapFactory, FocusTrap } from '@angular/cdk/a11y';
import { Overlay, OverlayKeyboardDispatcher, OverlayRef } from '@angular/cdk/overlay';
import { CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { BooleanInput, NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subject } from 'rxjs';
import { NzDrawerOptionsOfComponent, NzDrawerPlacement } from './drawer-options';
import { NzDrawerRef } from './drawer-ref';
import * as ɵngcc0 from '@angular/core';
export declare const DRAWER_ANIMATE_DURATION = 300;
export declare class NzDrawerComponent<T = NzSafeAny, R = NzSafeAny, D = NzSafeAny> extends NzDrawerRef<R> implements OnInit, OnDestroy, AfterViewInit, OnChanges, NzDrawerOptionsOfComponent {
    private document;
    nzConfigService: NzConfigService;
    private renderer;
    private overlay;
    private injector;
    private changeDetectorRef;
    private focusTrapFactory;
    private viewContainerRef;
    private overlayKeyboardDispatcher;
    static ngAcceptInputType_nzClosable: BooleanInput;
    static ngAcceptInputType_nzMaskClosable: BooleanInput;
    static ngAcceptInputType_nzMask: BooleanInput;
    static ngAcceptInputType_nzNoAnimation: BooleanInput;
    static ngAcceptInputType_nzKeyboard: BooleanInput;
    static ngAcceptInputType_nzCloseOnNavigation: BooleanInput;
    nzContent: TemplateRef<{
        $implicit: D;
        drawerRef: NzDrawerRef<R>;
    }> | Type<T>;
    nzClosable: boolean;
    nzMaskClosable: boolean;
    nzMask: boolean;
    nzCloseOnNavigation: boolean;
    nzNoAnimation: boolean;
    nzKeyboard: boolean;
    nzTitle?: string | TemplateRef<{}>;
    nzPlacement: NzDrawerPlacement;
    nzMaskStyle: NgStyleInterface;
    nzBodyStyle: NgStyleInterface;
    nzWrapClassName?: string;
    nzWidth: number | string;
    nzHeight: number | string;
    nzZIndex: number;
    nzOffsetX: number;
    nzOffsetY: number;
    set nzVisible(value: boolean);
    get nzVisible(): boolean;
    readonly nzOnViewInit: EventEmitter<void>;
    readonly nzOnClose: EventEmitter<MouseEvent>;
    drawerTemplate: TemplateRef<void>;
    bodyPortalOutlet?: CdkPortalOutlet;
    destroy$: Subject<void>;
    previouslyFocusedElement?: HTMLElement;
    placementChanging: boolean;
    placementChangeTimeoutId: number;
    nzContentParams?: D;
    overlayRef?: OverlayRef | null;
    portal?: TemplatePortal;
    focusTrap?: FocusTrap;
    isOpen: boolean;
    templateContext: {
        $implicit: D | undefined;
        drawerRef: NzDrawerRef<R>;
    };
    get offsetTransform(): string | null;
    get transform(): string | null;
    get width(): string | null;
    get height(): string | null;
    get isLeftOrRight(): boolean;
    nzAfterOpen: Subject<void>;
    nzAfterClose: Subject<R>;
    get afterOpen(): Observable<void>;
    get afterClose(): Observable<R>;
    isTemplateRef(value: {}): boolean;
    constructor(document: NzSafeAny, nzConfigService: NzConfigService, renderer: Renderer2, overlay: Overlay, injector: Injector, changeDetectorRef: ChangeDetectorRef, focusTrapFactory: ConfigurableFocusTrapFactory, viewContainerRef: ViewContainerRef, overlayKeyboardDispatcher: OverlayKeyboardDispatcher);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private getAnimationDuration;
    private triggerPlacementChangeCycleOnce;
    close(result?: R): void;
    open(): void;
    closeClick(): void;
    maskClick(): void;
    private attachBodyContent;
    private attachOverlay;
    private disposeOverlay;
    private getOverlayConfig;
    private updateOverlayStyle;
    private updateBodyOverflow;
    savePreviouslyFocusedElement(): void;
    private trapFocus;
    private restoreFocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzDrawerComponent<any, any, any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzDrawerComponent<any, any, any>, "nz-drawer", ["nzDrawer"], {
    "nzClosable": "nzClosable";
    "nzMaskClosable": "nzMaskClosable";
    "nzMask": "nzMask";
    "nzCloseOnNavigation": "nzCloseOnNavigation";
    "nzNoAnimation": "nzNoAnimation";
    "nzKeyboard": "nzKeyboard";
    "nzPlacement": "nzPlacement";
    "nzMaskStyle": "nzMaskStyle";
    "nzBodyStyle": "nzBodyStyle";
    "nzWidth": "nzWidth";
    "nzHeight": "nzHeight";
    "nzZIndex": "nzZIndex";
    "nzOffsetX": "nzOffsetX";
    "nzOffsetY": "nzOffsetY";
    "nzVisible": "nzVisible";
    "nzContent": "nzContent";
    "nzTitle": "nzTitle";
    "nzWrapClassName": "nzWrapClassName";
}, {
    "nzOnViewInit": "nzOnViewInit";
    "nzOnClose": "nzOnClose";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkcmF3ZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNGQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ29uZmlndXJhYmxlRm9jdXNUcmFwRmFjdG9yeSwgRm9jdXNUcmFwIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheUtleWJvYXJkRGlzcGF0Y2hlciwgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENka1BvcnRhbE91dGxldCwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBUeXBlLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekNvbmZpZ1NlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvY29uZmlnJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTmdTdHlsZUludGVyZmFjZSwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56RHJhd2VyT3B0aW9uc09mQ29tcG9uZW50LCBOekRyYXdlclBsYWNlbWVudCB9IGZyb20gJy4vZHJhd2VyLW9wdGlvbnMnO1xuaW1wb3J0IHsgTnpEcmF3ZXJSZWYgfSBmcm9tICcuL2RyYXdlci1yZWYnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRFJBV0VSX0FOSU1BVEVfRFVSQVRJT04gPSAzMDA7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOekRyYXdlckNvbXBvbmVudDxUID0gTnpTYWZlQW55LCBSID0gTnpTYWZlQW55LCBEID0gTnpTYWZlQW55PiBleHRlbmRzIE56RHJhd2VyUmVmPFI+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgTnpEcmF3ZXJPcHRpb25zT2ZDb21wb25lbnQge1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIG92ZXJsYXk7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgZm9jdXNUcmFwRmFjdG9yeTtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBvdmVybGF5S2V5Ym9hcmREaXNwYXRjaGVyO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekNsb3NhYmxlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TWFza0Nsb3NhYmxlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TWFzazogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uek5vQW5pbWF0aW9uOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256S2V5Ym9hcmQ6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpDbG9zZU9uTmF2aWdhdGlvbjogQm9vbGVhbklucHV0O1xuICAgIG56Q29udGVudDogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IEQ7XG4gICAgICAgIGRyYXdlclJlZjogTnpEcmF3ZXJSZWY8Uj47XG4gICAgfT4gfCBUeXBlPFQ+O1xuICAgIG56Q2xvc2FibGU6IGJvb2xlYW47XG4gICAgbnpNYXNrQ2xvc2FibGU6IGJvb2xlYW47XG4gICAgbnpNYXNrOiBib29sZWFuO1xuICAgIG56Q2xvc2VPbk5hdmlnYXRpb246IGJvb2xlYW47XG4gICAgbnpOb0FuaW1hdGlvbjogYm9vbGVhbjtcbiAgICBuektleWJvYXJkOiBib29sZWFuO1xuICAgIG56VGl0bGU/OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx7fT47XG4gICAgbnpQbGFjZW1lbnQ6IE56RHJhd2VyUGxhY2VtZW50O1xuICAgIG56TWFza1N0eWxlOiBOZ1N0eWxlSW50ZXJmYWNlO1xuICAgIG56Qm9keVN0eWxlOiBOZ1N0eWxlSW50ZXJmYWNlO1xuICAgIG56V3JhcENsYXNzTmFtZT86IHN0cmluZztcbiAgICBueldpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgbnpIZWlnaHQ6IG51bWJlciB8IHN0cmluZztcbiAgICBuelpJbmRleDogbnVtYmVyO1xuICAgIG56T2Zmc2V0WDogbnVtYmVyO1xuICAgIG56T2Zmc2V0WTogbnVtYmVyO1xuICAgIHNldCBuelZpc2libGUodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBuelZpc2libGUoKTogYm9vbGVhbjtcbiAgICByZWFkb25seSBuek9uVmlld0luaXQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSBuek9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PjtcbiAgICBkcmF3ZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgYm9keVBvcnRhbE91dGxldD86IENka1BvcnRhbE91dGxldDtcbiAgICBkZXN0cm95JDogU3ViamVjdDx2b2lkPjtcbiAgICBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgICBwbGFjZW1lbnRDaGFuZ2luZzogYm9vbGVhbjtcbiAgICBwbGFjZW1lbnRDaGFuZ2VUaW1lb3V0SWQ6IG51bWJlcjtcbiAgICBuekNvbnRlbnRQYXJhbXM/OiBEO1xuICAgIG92ZXJsYXlSZWY/OiBPdmVybGF5UmVmIHwgbnVsbDtcbiAgICBwb3J0YWw/OiBUZW1wbGF0ZVBvcnRhbDtcbiAgICBmb2N1c1RyYXA/OiBGb2N1c1RyYXA7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIHRlbXBsYXRlQ29udGV4dDoge1xuICAgICAgICAkaW1wbGljaXQ6IEQgfCB1bmRlZmluZWQ7XG4gICAgICAgIGRyYXdlclJlZjogTnpEcmF3ZXJSZWY8Uj47XG4gICAgfTtcbiAgICBnZXQgb2Zmc2V0VHJhbnNmb3JtKCk6IHN0cmluZyB8IG51bGw7XG4gICAgZ2V0IHRyYW5zZm9ybSgpOiBzdHJpbmcgfCBudWxsO1xuICAgIGdldCB3aWR0aCgpOiBzdHJpbmcgfCBudWxsO1xuICAgIGdldCBoZWlnaHQoKTogc3RyaW5nIHwgbnVsbDtcbiAgICBnZXQgaXNMZWZ0T3JSaWdodCgpOiBib29sZWFuO1xuICAgIG56QWZ0ZXJPcGVuOiBTdWJqZWN0PHZvaWQ+O1xuICAgIG56QWZ0ZXJDbG9zZTogU3ViamVjdDxSPjtcbiAgICBnZXQgYWZ0ZXJPcGVuKCk6IE9ic2VydmFibGU8dm9pZD47XG4gICAgZ2V0IGFmdGVyQ2xvc2UoKTogT2JzZXJ2YWJsZTxSPjtcbiAgICBpc1RlbXBsYXRlUmVmKHZhbHVlOiB7fSk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IE56U2FmZUFueSwgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG92ZXJsYXk6IE92ZXJsYXksIGluamVjdG9yOiBJbmplY3RvciwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBmb2N1c1RyYXBGYWN0b3J5OiBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5LCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBvdmVybGF5S2V5Ym9hcmREaXNwYXRjaGVyOiBPdmVybGF5S2V5Ym9hcmREaXNwYXRjaGVyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRBbmltYXRpb25EdXJhdGlvbjtcbiAgICBwcml2YXRlIHRyaWdnZXJQbGFjZW1lbnRDaGFuZ2VDeWNsZU9uY2U7XG4gICAgY2xvc2UocmVzdWx0PzogUik6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIGNsb3NlQ2xpY2soKTogdm9pZDtcbiAgICBtYXNrQ2xpY2soKTogdm9pZDtcbiAgICBwcml2YXRlIGF0dGFjaEJvZHlDb250ZW50O1xuICAgIHByaXZhdGUgYXR0YWNoT3ZlcmxheTtcbiAgICBwcml2YXRlIGRpc3Bvc2VPdmVybGF5O1xuICAgIHByaXZhdGUgZ2V0T3ZlcmxheUNvbmZpZztcbiAgICBwcml2YXRlIHVwZGF0ZU92ZXJsYXlTdHlsZTtcbiAgICBwcml2YXRlIHVwZGF0ZUJvZHlPdmVyZmxvdztcbiAgICBzYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB0cmFwRm9jdXM7XG4gICAgcHJpdmF0ZSByZXN0b3JlRm9jdXM7XG59XG4iXX0=