/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { AnimationEvent } from '@angular/animations';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare function throwNzModalContentAlreadyAttachedError(): never;
export declare class BaseModalContainer extends BasePortalOutlet implements OnDestroy {
    protected elementRef: ElementRef;
    protected focusTrapFactory: FocusTrapFactory;
    cdr: ChangeDetectorRef;
    protected render: Renderer2;
    protected zone: NgZone;
    protected overlayRef: OverlayRef;
    protected nzConfigService: NzConfigService;
    config: ModalOptions;
    protected animationType?: string | undefined;
    portalOutlet: CdkPortalOutlet;
    modalElementRef: ElementRef<HTMLDivElement>;
    animationStateChanged: EventEmitter<AnimationEvent>;
    containerClick: EventEmitter<void>;
    cancelTriggered: EventEmitter<void>;
    okTriggered: EventEmitter<void>;
    onDestroy: EventEmitter<void>;
    state: 'void' | 'enter' | 'exit';
    document: Document;
    modalRef: NzModalRef;
    isStringContent: boolean;
    private elementFocusedBeforeModalWasOpened;
    private focusTrap;
    private latestMousedownTarget;
    private oldMaskStyle;
    protected destroy$: Subject<unknown>;
    get showMask(): boolean;
    get maskClosable(): boolean;
    constructor(elementRef: ElementRef, focusTrapFactory: FocusTrapFactory, cdr: ChangeDetectorRef, render: Renderer2, zone: NgZone, overlayRef: OverlayRef, nzConfigService: NzConfigService, config: ModalOptions, document?: NzSafeAny, animationType?: string | undefined);
    onMousedown(e: MouseEvent): void;
    onMouseup(e: MouseEvent): void;
    onCloseClick(): void;
    onOkClick(): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    getNativeElement(): HTMLElement;
    private animationDisabled;
    private setModalTransformOrigin;
    private savePreviouslyFocusedElement;
    private trapFocus;
    private restoreFocus;
    private setEnterAnimationClass;
    private setExitAnimationClass;
    private cleanAnimationClass;
    private bindBackdropStyle;
    /**
     * Set the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private setContainer;
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private resetContainer;
    private getContainer;
    updateMaskClassname(): void;
    onAnimationDone(event: AnimationEvent): void;
    onAnimationStart(event: AnimationEvent): void;
    startExitAnimation(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseModalContainer>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseModalContainer, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udGFpbmVyLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLWNvbnRhaW5lci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEZvY3VzVHJhcEZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQmFzZVBvcnRhbE91dGxldCwgQ2RrUG9ydGFsT3V0bGV0LCBDb21wb25lbnRQb3J0YWwsIFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50UmVmLCBFbGVtZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL2NvbmZpZyc7XG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbW9kYWwtcmVmJztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gdGhyb3dOek1vZGFsQ29udGVudEFscmVhZHlBdHRhY2hlZEVycm9yKCk6IG5ldmVyO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmFzZU1vZGFsQ29udGFpbmVyIGV4dGVuZHMgQmFzZVBvcnRhbE91dGxldCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGZvY3VzVHJhcEZhY3Rvcnk6IEZvY3VzVHJhcEZhY3Rvcnk7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcbiAgICBwcm90ZWN0ZWQgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2U7XG4gICAgY29uZmlnOiBNb2RhbE9wdGlvbnM7XG4gICAgcHJvdGVjdGVkIGFuaW1hdGlvblR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgcG9ydGFsT3V0bGV0OiBDZGtQb3J0YWxPdXRsZXQ7XG4gICAgbW9kYWxFbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICBhbmltYXRpb25TdGF0ZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25FdmVudD47XG4gICAgY29udGFpbmVyQ2xpY2s6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjYW5jZWxUcmlnZ2VyZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBva1RyaWdnZXJlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIG9uRGVzdHJveTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIHN0YXRlOiAndm9pZCcgfCAnZW50ZXInIHwgJ2V4aXQnO1xuICAgIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgICBtb2RhbFJlZjogTnpNb2RhbFJlZjtcbiAgICBpc1N0cmluZ0NvbnRlbnQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBlbGVtZW50Rm9jdXNlZEJlZm9yZU1vZGFsV2FzT3BlbmVkO1xuICAgIHByaXZhdGUgZm9jdXNUcmFwO1xuICAgIHByaXZhdGUgbGF0ZXN0TW91c2Vkb3duVGFyZ2V0O1xuICAgIHByaXZhdGUgb2xkTWFza1N0eWxlO1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDx1bmtub3duPjtcbiAgICBnZXQgc2hvd01hc2soKTogYm9vbGVhbjtcbiAgICBnZXQgbWFza0Nsb3NhYmxlKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgcmVuZGVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiwgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIGNvbmZpZzogTW9kYWxPcHRpb25zLCBkb2N1bWVudD86IE56U2FmZUFueSwgYW5pbWF0aW9uVHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZCk7XG4gICAgb25Nb3VzZWRvd24oZTogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgb25Nb3VzZXVwKGU6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG9uQ2xvc2VDbGljaygpOiB2b2lkO1xuICAgIG9uT2tDbGljaygpOiB2b2lkO1xuICAgIGF0dGFjaENvbXBvbmVudFBvcnRhbDxUPihwb3J0YWw6IENvbXBvbmVudFBvcnRhbDxUPik6IENvbXBvbmVudFJlZjxUPjtcbiAgICBhdHRhY2hUZW1wbGF0ZVBvcnRhbDxDPihwb3J0YWw6IFRlbXBsYXRlUG9ydGFsPEM+KTogRW1iZWRkZWRWaWV3UmVmPEM+O1xuICAgIGdldE5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBhbmltYXRpb25EaXNhYmxlZDtcbiAgICBwcml2YXRlIHNldE1vZGFsVHJhbnNmb3JtT3JpZ2luO1xuICAgIHByaXZhdGUgc2F2ZVByZXZpb3VzbHlGb2N1c2VkRWxlbWVudDtcbiAgICBwcml2YXRlIHRyYXBGb2N1cztcbiAgICBwcml2YXRlIHJlc3RvcmVGb2N1cztcbiAgICBwcml2YXRlIHNldEVudGVyQW5pbWF0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBzZXRFeGl0QW5pbWF0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBjbGVhbkFuaW1hdGlvbkNsYXNzO1xuICAgIHByaXZhdGUgYmluZEJhY2tkcm9wU3R5bGU7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb250YWluZXIgZWxlbWVudC5cbiAgICAgKiBAZGVwcmVjYXRlZCBOb3Qgc3VwcG9ydGVkLlxuICAgICAqIEBicmVha2luZy1jaGFuZ2UgMTAuMC4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRDb250YWluZXI7XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICAgICAqIEBkZXByZWNhdGVkIE5vdCBzdXBwb3J0ZWQuXG4gICAgICogQGJyZWFraW5nLWNoYW5nZSAxMC4wLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc2V0Q29udGFpbmVyO1xuICAgIHByaXZhdGUgZ2V0Q29udGFpbmVyO1xuICAgIHVwZGF0ZU1hc2tDbGFzc25hbWUoKTogdm9pZDtcbiAgICBvbkFuaW1hdGlvbkRvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBvbkFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgc3RhcnRFeGl0QW5pbWF0aW9uKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==